// 34. Find First and Last Position of Element in Sorted Array

// Upsolving code

class Solution {
public:

    int searchIndex(vector<int> nums, int target, bool findStartIndex) {
        int ans = -1;
        int start = 0, end = nums.size() - 1;

        while(start <= end) {
            int mid = (start + (end - start) / 2);

            if(target < nums[mid]) end = mid - 1;
            else if (target > nums[mid]) start = mid + 1;
            else {
                ans = mid;

                if(findStartIndex) end = mid - 1;
                else start = mid + 1;
            }
        }

        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;

        int first = searchIndex(nums, target, true);
        int last = searchIndex(nums, target, false);

        ans.push_back(first);
        ans.push_back(last);
        
        return ans;
    }
};



// 162. Find Peak Element

// My code - TLE - 5 TESTCASES RUN

class Solution {
public:
    int findPeakElement(vector<int>& arr) {
        int lastIndex = arr.size() - 1;
        if ( arr.size() == 1)
        {
            return 0;
        }
        int start = 0;
        int end = lastIndex;

        int mid = start + ( end - start ) /2 ;

        while( start < end )
        {
            if( mid == 0)
            {
                if( arr[mid + 1] < arr[mid])
                {
                    return mid;
                }
            }
            else if( mid == lastIndex)
            {
                if ( arr[mid] > arr[mid+1])
                {
                    return mid;
                }
            }
            else if( ( arr[mid] > arr[mid+1] ) && ( arr[mid] > arr[mid-1] ) )
                {
                    return mid;
                }
            else if ( arr[mid] < arr[mid+1] )
            {
                start = mid + 1;
            }
            else
            {
                end = mid;
            }

            mid = start + ( end - start ) /2 ;
        }

        return -1;
    }
};


// UP`SOLVE CODE

class Solution {
public:
    int findPeakElement(const vector<int> &num) {
        int low = 0, high = num.size() - 1;
        while (low < high - 1) {
            int mid = (low + high) / 2;
            if (num[mid] > num[mid - 1] && num[mid] > num[mid + 1]) 
                return mid;
            else if (num[mid] > num[mid + 1]) 
                    high = mid - 1;
                 else 
                    low = mid + 1;    
        }
        return num[low] > num[high] ? low : high;
    }
};
